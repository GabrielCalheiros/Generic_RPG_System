import markdown
from bs4 import BeautifulSoup

# Read the ./rules.md file
with open('./rules.md', 'r', encoding='utf-8') as f:
    content = f.read()

# Convert Markdown to HTML
html_content = markdown.markdown(content, extensions=['toc', 'attr_list', 'tables', 'fenced_code'])

# Use BeautifulSoup to parse the HTML and extract headers
soup = BeautifulSoup(html_content, 'html.parser')

# Function to build a nested TOC from the headers
def build_toc(soup):
    toc = []
    current_level = 0
    stack = []
    
    # Maintain counters for each header level (h1, h2, etc.)
    level_counters = [0] * 6  # Assuming we may have h1 to h6
    
    for header in soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']):
        level = int(header.name[1])  # Get the header level (1, 2, 3, etc.)
        header_id = header.get('id')  # Use the ID generated by the 'toc' extension
        header_text = header.text  
        
        # Increment the current level counter and reset lower levels
        level_counters[level - 1] += 1
        for i in range(level, 6):
            level_counters[i] = 0
        
        # Build the section number (e.g., 1.1, 1.2, 2.1.1)
        section_number = ".".join(str(c) for c in level_counters[:level] if c > 0)
      
                        
        # Create a list item for the TOC
        li = f'''
        <li>
            <a href="#{header_id}">
                <span class="title">{header_text}<span class="leaders" aria-hidden="true"></span></span>
                <span class="page"><span class="visually-hidden">Page</span> {section_number}</span>
            </a>
        </li>
        '''
        i += 1
        
        # Adjust TOC structure based on the header level
        if level > current_level:
            # Start a new nested list
            toc.append('<ol class="toc-list" role="list">')
            stack.append('</ol>')
        elif level < current_level:
            # Close the previous nested list
            for _ in range(current_level - level):
                toc.append(stack.pop())
        
        toc.append(li)
        current_level = level
    
    # Close any remaining open lists
    while stack:
        toc.append(stack.pop())
    
    return '\n'.join(toc)

# Generate the TOC
toc_html = build_toc(soup)

# Final HTML content with the generated TOC
html = f'''
<html lang="en">

    <head>

        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">
        <title>Eidos - Rules</title>
        <meta name="description" content="Eidos Rulebook">
        <link rel="icon" type="image/x-icon" href="./images/favicon.svg">

        <meta name="apple-mobile-web-app-capable" content="yes">
        
        <style 
        
        <style>

            body {{
                font-family: "Times New Roman", Times, serif;
                background-color: black;
                color: white;
                width: 800px;
                margin: auto;
            }}

            /* General styles for unordered lists (ul) */
            ul {{
                list-style-type: none; /* Remove default bullets */
                padding-left: 0; /* Remove default padding */
            }}

            /* Nested list items will be indented */
            ul ul {{
                padding-left: 20px; /* Indent nested lists */
            }}

            li {{
                margin-bottom: 5px; /* Add some space between list items */
            }}

            a {{
                color: white; /* Light yellow for links */
                text-decoration: none; /* Remove underline */
            }}

            a:hover {{
                text-decoration: underline; /* Add underline on hover */
            }}
                        
            p {{
                text-align: justify;
            }}

            img {{
                width: 100%;
            }}
            
            table {{
                width: 100%;
                border-collapse: collapse;
                margin-bottom: 20px;
                background-color: #333; /* Dark background for the table */
                color: white; /* White text for monochrome theme */
            }}

            th, td {{
                padding: 12px;
                text-align: left;
                border: 1px solid white; /* White borders for table cells */
            }}

            th {{
                background-color: black; /* Black background for table headers */
                font-weight: bold;
            }}

            td {{
                background-color: black;
            }}
            
            /* Edit OL */
            ol {{
                list-style-type: square;
            }}

            
            .toc-list li > a {{
                text-decoration: none;
                display: grid;
                grid-template-columns: auto max-content;
                align-items: end;
            }}

            .toc-list li > a > .page {{
                text-align: right;
            }}
            
            .visually-hidden {{
                clip: rect(0 0 0 0);
                clip-path: inset(100%);
                height: 1px;
                overflow: hidden;
                position: absolute;
                width: 1px;
                white-space: nowrap;
            }}
            
            .toc-list li > a > .title {{
                position: relative;
                overflow: hidden;
            }}

            .toc-list li > a .title::after {{
                position: absolute;
                padding-left: .25ch;
                content: " . . . . . . . . . . . . . . . . . . . "
                    ". . . . . . . . . . . . . . . . . . . . . . . "
                    ". . . . . . . . . . . . . . . . . . . . . . . "
                    ". . . . . . . . . . . . . . . . . . . . . . . "
                    ". . . . . . . . . . . . . . . . . . . . . . . "
                    ". . . . . . . . . . . . . . . . . . . . . . . "
                    ". . . . . . . . . . . . . . . . . . . . . . . ";
                text-align: right;
            }}
            
            .toc-list > li > a {{
                font-weight: bold;
                margin-block-start: 1em;
            }}
            

            @media print {{
                
                body {{
                    background-color: white;
                    color: black;
                }}
                
                img {{
                    filter: invert(100%);
                }}
                
                a {{
                    color: black;
                }}
                
                table {{
                    background-color: white; /* Dark background for the table */
                    color: black; /* White text for monochrome theme */
                }}
                
                th, td {{
                    border: 1px solid black; /* White borders for table cells */
                }}
                
                td {{
                    background-color: white;
                }}
                
                /* Control page breaks */
                table, img, pre {{
                    page-break-inside: avoid;
                }}
                
                .toc-list {{
                    list-style-type: decimal;
                }}
                
                /* Page numbers */
                @page {{
                    margin: 1in;
                }}

                /* Adding a footer with page numbers */
                @page :right {{
                    @bottom-right {{
                        content: "Page " counter(page);
                    }}
                }}

                @page :left {{
                    @bottom-left {{
                        content: "Page " counter(page);
                    }}
                }}

            }}

        </style>

    </head>
    
    <body>
    
        <br>
        <nav>
            <h2>Table of Contents</h2>
            {toc_html}
        </nav>
    
        <article>
            {html_content}
        </article>
    
    </body>

</html>
'''

# Write the final HTML to ./rules.html
with open('./rules.html', 'w', encoding='utf-8') as f:
    f.write(html)
